{"name": "test_test", "status": "broken", "statusDetails": {"message": "TypeError: not all arguments converted during string formatting", "trace": "self = <testcases.test.Test_test object at 0x000001CD1996D130>\n\n    def test_test(self):\n        # chrome_options = webdriver.ChromeOptions()\n        # chrome_options.add_argument(\"--headless\")\n        # chrome_options.add_argument(\"--no-sandbox\")\n        # chromedriver_path = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))),\n        #                                  \"config\\chromedriver.exe\")\n        # logger.info(chromedriver_path)\n        # logger.info(chrome_options)\n        # browser = webdriver.Chrome(chromedriver_path, options=chrome_options)\n        # browser.get(\n        #     \"https://passport.zhihuishu.com/login?service=https://onlineservice.zhihuishu.com/login/gologin\")\n        # time.sleep(3)\n        # browser.find_element_by_xpath(\"//*[@id='lUsername']\").send_keys(\"13122285260\")\n        # time.sleep(1)\n        # browser.find_element_by_xpath(\"//*[@id='lPassword']\").send_keys(\"Aa111111\")\n        # time.sleep(1)\n        # browser.find_element_by_xpath(\"//*[@id='f_sign_up']/div[1]/span\").click()\n        # time.sleep(3)\n        # list_cookies = browser.get_cookies()\n        # cookies = {}\n        # for s in list_cookies:\n        #     cookies[s[\"name\"]] = s[\"value\"]\n        # browser.quit()\n        # cookies = {\n        #     \"name\": 1\n        # }\n    \n        BASE_PATH = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))\n        yamlpath = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), \"data\\\\base_data.yml\")\n        data = get_data(yamlpath)\n        logger.info(data)\n        for list in data:\n            logger.info(list)\n        # with open(yamlpath, \"w\", encoding=\"utf-8\") as f:\n        #     yaml.dump(cookies, f, Dumper=yaml.RoundTripDumper)\n        # return cookies\n        account = base_data[\"init_user_login_teacher\"][\"account\"]\n        password = base_data[\"init_user_login_teacher\"][\"password\"]\n>       logger.info(account, password)\n\ntest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:1446: in info\n    self._log(INFO, msg, args, **kwargs)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:1589: in _log\n    self.handle(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:1599: in handle\n    self.callHandlers(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:1661: in callHandlers\n    hdlr.handle(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:952: in handle\n    self.emit(record)\n..\\venv\\lib\\site-packages\\_pytest\\logging.py:331: in emit\n    super().emit(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:1091: in emit\n    self.handleError(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:1083: in emit\n    msg = self.format(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:927: in format\n    return fmt.format(record)\n..\\venv\\lib\\site-packages\\_pytest\\logging.py:92: in format\n    return super().format(record)\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:663: in format\n    record.message = record.getMessage()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <LogRecord: log, 20, C:\\worksapce\\pytest\\pytestDemo-master\\testcases\\test.py, 68, \"13122285260\">\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n    \n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n>           msg = msg % self.args\nE           TypeError: not all arguments converted during string formatting\n\nC:\\Users\\able\\AppData\\Local\\Programs\\Python\\Python39\\lib\\logging\\__init__.py:367: TypeError"}, "attachments": [{"name": "log", "source": "66f916c0-49d9-49a7-b2b8-21b9342e8b4a-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "aaebd496-e2aa-4092-a703-6e45614f9208-attachment.txt", "type": "text/plain"}], "start": 1627462914926, "stop": 1627462914934, "uuid": "adf3d664-fbec-49bd-8765-ed1598699848", "historyId": "f032f27ee18f9de67a3bb9c16eae57b3", "testCaseId": "03f410e480c0a1872c83a1d8dc4f54f4", "fullName": "testcases.test.Test_test#test_test", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test"}, {"name": "subSuite", "value": "Test_test"}, {"name": "host", "value": "DESKTOP-FRVNKTB"}, {"name": "thread", "value": "12056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test"}]}