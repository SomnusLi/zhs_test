{"name": "测试数据：【 wintest，123456，True，0，登录成功】", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL '/login': No schema supplied. Perhaps you meant http:///login?", "trace": "self = <testcases.api_test.test_03_login.TestUserLogin object at 0x000001667D46EC70>\nusername = 'wintest', password = '123456', except_result = True, except_code = 0\nexcept_msg = '登录成功'\n\n    @allure.story(\"用例--登录用户\")\n    @allure.description(\"该用例是针对获取用户登录接口的测试\")\n    @allure.issue(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"测试数据：【 {username}，{password}，{except_result}，{except_code}，{except_msg}】\")\n    @pytest.mark.single\n    @pytest.mark.parametrize(\"username, password, except_result, except_code, except_msg\",\n                             api_data[\"test_login_user\"])\n    def test_login_user(self, username, password, except_result, except_code, except_msg):\n        logger.info(\"*************** 开始执行用例 ***************\")\n>       result = login_user(username, password)\n\ntest_03_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\operation\\user.py:90: in login_user\n    res = user.login(data=payload, headers=header)\n..\\..\\api\\user.py:25: in login\n    return self.post(\"/login\", **kwargs)\n..\\..\\core\\rest_client.py:16: in post\n    return self.request(url, \"POST\", data, json, **kwargs)\n..\\..\\core\\rest_client.py:37: in request\n    return requests.post(url, data, json, **kwargs)\n..\\..\\venv\\lib\\site-packages\\requests\\api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\n..\\..\\venv\\lib\\site-packages\\requests\\api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\..\\venv\\lib\\site-packages\\requests\\sessions.py:510: in request\n    prep = self.prepare_request(req)\n..\\..\\venv\\lib\\site-packages\\requests\\sessions.py:443: in prepare_request\n    p.prepare(\n..\\..\\venv\\lib\\site-packages\\requests\\models.py:313: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [POST]>, url = '/login', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/requests/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL '/login': No schema supplied. Perhaps you meant http:///login?\n\n..\\..\\venv\\lib\\site-packages\\requests\\models.py:387: MissingSchema"}, "description": "该用例是针对获取用户登录接口的测试", "attachments": [{"name": "log", "source": "c6d1b958-63f3-43b3-aa9c-8cac0ecb782f-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "68344433-d283-4cb8-97d5-10fb6a647339-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'wintest'"}, {"name": "password", "value": "'123456'"}, {"name": "except_result", "value": "True"}, {"name": "except_code", "value": "0"}, {"name": "except_msg", "value": "'登录成功'"}], "start": 1623304905492, "stop": 1623304905496, "uuid": "b28bbb45-3d6e-4afc-a396-ed60d77e8213", "historyId": "4ab02ebad4baabe28d2fb7352ad2343a", "testCaseId": "7272db244dabef390096479ae3196642", "fullName": "testcases.api_test.test_03_login.TestUserLogin#test_login_user", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "用户登录模块"}, {"name": "epic", "value": "针对单个接口的测试"}, {"name": "story", "value": "用例--登录用户"}, {"name": "tag", "value": "single"}, {"name": "parentSuite", "value": "testcases.api_test"}, {"name": "suite", "value": "test_03_login"}, {"name": "subSuite", "value": "TestUserLogin"}, {"name": "host", "value": "DESKTOP-FRVNKTB"}, {"name": "thread", "value": "21304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.api_test.test_03_login"}], "links": [{"type": "test_case", "url": "https://www.cnblogs.com/wintest", "name": "点击，跳转到对应用例的链接地址"}, {"type": "issue", "url": "https://www.cnblogs.com/wintest", "name": "点击，跳转到对应BUG的链接地址"}]}